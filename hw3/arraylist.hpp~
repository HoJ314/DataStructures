//Name: Justin Merila
//Section: 1C
//Date: 2/23/16
//Purpose: Define functions in arraylist.h

template <typename T>

//Parameterized Constructor
ArrayList<T> :: ArrayList(int s, const T& x)
{
  m_max = s;
  m_size = s;
  for(int i=0; i<s; i++)
  {
    m_data[i] = x;
  }
}

//Destructor
template <typename T>
ArrayList<T> :: ~ArrayList()
{
  m_size = 0;
  m_max = 0;
  delete []m_data;
}

//Assignment Operator
template <typename T>
ArrayList<T>& ArrayList<T> :: operator=(const ArrayList<T>& rhs)
{
  delete []m_data;
  m_data = new T[rhs.m_size];
  for(int i=0;  i<rhs.m_size; i++)
  {
    m_data[i] = rhs.m_data[i];
  }
  return *this;
}

//Copy Constructor
template <typename T>
ArrayList<T> :: ArrayList(const ArrayList<T>& cpy)
{
  m_data = new T[cpy.m_size];
  for(int i=0; i<cpy.m_size; i++)
  {
    m_data[i] = cpy.m_data[i];
  }
}

//Size accessor
template <typename T>
int ArrayList<T> :: size() const
{
  return m_size;
}

//return first element
template <typename T>
const T& ArrayList<T> :: first() const
{
  return m_data[0];
}

//return read and write reference
template <typename T>
T& ArrayList<T> :: operator[](int i)
{
  return m_data[i];
}

//return read only reference
template <typename T>
const T& ArrayList<T> :: operator[](int i) const
{
  return m_data[i];
}

//find a value in the ArrayList
template <typename T>
int ArrayList<T> :: find(const T& x) const
{
  for(int i=0; i<m_size; i++)
  {
    if(m_data[i] == x)
    {
      return i;
    }
  }
  return -1;
}

//Clear an ArrayList
template <typename T>
void ArrayList<T> :: clear()
{
  m_data = NULL;
  m_size = 0;
  //m_max = 0;
 
  return;
}

//Insert value at back of arraylist
template <typename T>
void ArrayList<T> :: insert_back(const T& x)
{
  if(m_size+1 > m_max)
  {
    T *temp = new T[11];
    for(int i=0; i<m_size; i++)
    {
      temp[i]=m_data[i];
    }
    delete []m_data;
    m_data = new T[11];  
    for(int i=0; i<m_size; i++)
    {
      m_data[i]=temp[i];
    }
    delete []temp;
  }
  
  m_data[m_size+1] = x;
  m_size++;
  return;
}

//inert function
template <typename T>
void ArrayList<T> :: insert(const T& x, int i)
{
  if(m_size+1 > m_max)
  {
    T *temp = new T[m_size+1];
    for(int j=0; j<m_size; j++)
    {
      temp[j]=m_data[j];
    }
    delete m_data;
    m_data = new T[30];
    
    for(int j=0; j<m_size+1; j++)
    {
      m_data[j]=temp[j];
    }
    delete []temp;
  }
  
  for(int j=i; j<m_size+1; j++)
  {
    m_data[j+1]=m_data[j];
  }
  m_size++;
  m_data[i]=x;
  return;
}

//Remove function
template <typename T>
void ArrayList<T> :: remove(int i)
{
  for(int j=i; j<m_size; j++)
  {
    m_data[j]=m_data[j+1];
  }
  if(m_size>0)
  {
    m_size--;
  }
  return;
}

//Swap function
template <typename T>
void ArrayList<T> :: swap(int i, int k)
{
  T temp = m_data[i];
  m_data[i] = m_data[k];
  m_data[k] = temp;
  return;
}

//Resize function
template <typename T>
void ArrayList<T> :: resize(int s, const T& x)
{
  if(s<m_size)
  {
    for(int i=s; i<m_size; i++)
    {
      m_data[i]=0;
    }
  }
  if(s>m_size)
  {
    m_data[3]=x;
  }
  return;
}

//Append Function
template <typename T>
void ArrayList<T> :: append(const ArrayList<T>& alist)
{
  m_data[1]=alist.m_data[1];
  
  return;
}
